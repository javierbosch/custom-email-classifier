students-bounces@inf.ed.ac.uk
---------------
[Students] Talks Monday 20th April Lecturer/Senior Lecturer/Reader in Compilers and Runtime Systems
---------------
The talks for Lecturer/Senior Lecturer/Reader in Compilers and Runtime Systems will take place Monday 20th April. Please note all talks are confidential and should not be shared out with the school. 

 

We will be using Blackboard Collaborate for these talks, please use the following link when required: https://eu.bbcollab.com/guest/a5a9734eb5d74a3fb70ede68a240e0aa

(Chrome browser and headphones recommended) 

 

Feedback on the Research talks can be sent by email to Jane Hillston (Jane.Hillston@ed.ac.uk <mailto:Jane.Hillston@ed.ac.uk> ) or Mahesh Marina (Mahesh@ed.ac.uk <mailto:Mahesh@ed.ac.uk> ) 

Feedback on the Teaching talks can be sent by email to Bjoern Franke (B.Franke@ed.ac.uk <mailto:B.Franke@ed.ac.uk> ) 

 

If anyone wishes to talk with the candidates please contact their hosts who will be arranging an online schedule for them. 

 

-----

 

Research talks 

 

9.00am: Soham Chakraborty (host Vijay Nagarajan vnagaraj@inf.ed.ac.uk <mailto:vnagaraj@inf.ed.ac.uk> )

Biography:

Soham Chakraborty is a Pankaj Gupta Faculty Fellow and Assistant Professor at the Department of Computer Science and Engineering, IIT Delhi. He has obtained his PhD from the Max Planck Institute for Software Systems (MPI-SWS), Germany. He has worked in various industrial research positions for 5 years before starting PhD. His broad research interests are Programming Languages and compilers. He is currently focused on relaxed memory concurrency, compiler correctness, and related topics.

 

Publications:

http://www.cse.iitd.ac.in/~soham/publications.html 

 

Research Talk: 

Relaxed Memory Concurrency and Compiler Correctness

In this talk, I will present my work on formally defining a good concurrency model for C/C++ and proving that it satisfies both requirements. Unlike the prior state-of-the-art models, our model is easy to adapt and we have extended it to cover the full range of C/C++ features. I will conclude with a summary of my ongoing work and future research plans.

 

9.45am: Michael Steuwer (host Boris Grot Boris.Grot@ed.ac.uk <mailto:Boris.Grot@ed.ac.uk> )

Biography:

Michel Steuwer (michel.steuwer.info <https://michel.steuwer.info/> ) is a Lecturer in the School of Computing Science at the University of Glasgow. His research focuses on developing novel compilation techniques aiming for achieving unprecedented performance and efficiency by optimising domain-specific applications for heterogeneous and specialised hardware. With the Lift project (lift-project.org) he has pioneered research into performance portable programming languages, allowing software to be written once in a high-level language and automatically be optimised for best performance on a diverse set of hardware devices. He has authored over 40 papers and his work has been widely recognised by the academic community with highly cited papers and the best paper award at CGO 2018. His work has been cited as direct influence for industry compiler designs such as for the recent MLIR framework. He recently won a Google Faculty Award 2019.

 

Publications:

https://scholar.google.com/citations?user=XdXJRZEAAAAJ&hl=en 

https://michel.steuwer.info/publications/ 

https://dblp.uni-trier.de/pers/hd/s/Steuwer:Michel 

 

Research Talk:

A framework for systematically optimising domain-specific applications for specialised hardware.

Automatically optimising compilers often disappoint. They disappoint by missing crucial high-level optimisations for many upcoming application domains. They disappoint by failing to fully exploit the increasingly specialised hardware devices. As a result complex and costly optimisations manually encoded in low-level code or libraries remain currently the only reliable way to achieve high-performance.

Domain-specific compilers promise to address part of this challenge by automatically performing high-level domain-specific optimisations. But building domain-specific compilers that generate efficient code for specialised hardware devices remains a complex and labour intensive task involving much fine tuning that only global industrial players are capable of. So, how do we design a better next generation of optimising compilers?

In this talk, I will present our approach for designing compilers that systematically optimising domain-specific applications for a diverse set of hardware. Key to our design is that we embrace extensibility and composability of both computations and optimisations. Computations are represented by a pattern-based intermediate representation. Fundamental building blocks are flexible generic patterns. This intermediate representation is easily extensible with domain- and hardware-specific patterns. Optimisations are composed of simple rewrite-rules in a purposely build strategy language that allows to abstract common optimisation strategies. The compiler is easily extensible with domain- and hardware-specific optimisation strategies and experts are allowed to precisely control the optimisation process.

I demonstrate that this generic and flexible design achieves high-performance comparable to existing domain-specific compilers and show exciting future research directions that opens up from our approach.

 

10.30am: Thomas Spink (host Antonio Barbalace antonio.barbalace@ed.ac.uk <mailto:antonio.barbalace@ed.ac.uk> )

Biography: 

Dr Tom Spink is currently a senior researcher in the School of Informatics, and is a member of the Institute for Computing Systems Architecture (ICSA). He graduated with his PhD from the University of Edinburgh in 2017, and has been working as a postdoc in ICSA since June 2016. His research interests lie in the area of operating systems, hardware virtualisation, compilers, and the Internet-of-Things.

 

Publications: 

https://homepages.inf.ed.ac.uk/tspink/#pubs

 

Research Talk: 

Efficient cross-architecture hardware virtualisation

Virtualisation is a powerful tool used for the isolation, partitioning, and sharing of physical computing resources.  Employed heavily in data centres, becoming increasingly popular in industrial settings, and used by home-users for running alternative operating systems, hardware virtualisation has seen a lot of attention from hardware and software developers over the last tenâ€“fifteen years.

Most forms of hardware virtualisation are typically "same-architecture"

virtualisation, where hardware accelerators built in to modern processors provide very fast virtual instances of the same physical machine.

But, there is a distinct lack of hardware support for cross-architecture virtualisation, where the guest machine architecture is different to the host.

I will discuss my research in this area, and describe the cross-architecture virtualisation hypervisor Captive that can boot unmodified guest operating systems which are compiled for one architecture in the virtual machine of another.

This runtime system is built on a novel domain-specific dynamic binary translation framework, and is supported by the just-in-time compilation of one instruction set architecture to another.

I will talk about the challenges that exist in full system simulation, why we care about it, what the future holds, and where we go from here.

 

11.15am: Break 

 

11.30am: Tobias Grosser (host Nigel Topham npt@staffmail.ed.ac.uk <mailto:npt@staffmail.ed.ac.uk> )

Biography: 

Tobias Grosser is a senior research associate at ETH Zurich who uses strong theoretical reasoning to bring performance innovations to real-world compilation and programming language problems. As an expert in constraint-based loop optimization and lead-developer of the LLVM/Polly loop optimizer, Tobias has brought mathematical rigors reasoning to production compilers. His current objective is to rethink performance programming by re-connecting developers and compilers. His primary objectives are: (a) making compilation more modular, predictable, automatic, and trustworthy, (b) bringing open-source compiler innovation to an increasingly broad set of targets from GPUs over FPGAs to custom hardware, and (c) breaking down the barriers between compilers and programmers by enabling their interaction via the programming language environment. He dreams of a future, where performance programming is an intuitive play between the programmer and the compiler that moves smoothly between manual and automatic techniques and works across software and hardware.

 

Publications: 

https://grosser.es/publications.html                                        

 

Research Talk:

Data-Centric Analysis and Code-Generation in High-Performance Compilers

While the cost of computation is a well-understood local property, data movement costs on modern hardware are not at all obvious. As a result, programmers struggle when optimizing programs for performance. We show how mathematical constraint programming techniques help to effectively analyze and optimize complex loop programs in the real-world. We discuss both automatic transformation systems as well as software support that directly interacts with performance engineers. Giving a deep-dive into our recent work on modeling the cache behavior of loop programs, we illustrate how we reduce development overheads by eliminating the need for long-running software simulation from the development process. Our new model of fully associative caches provides accurate results asymptotically fast by exploiting interesting properties for symbolic counting of convex volumes. As a result, data-movement aware programming often becomes easy as programming with auto-completion.

From this example, we discuss our vision of developer productivity in a future where hardware moves from cached CPUs to ASICs, correctness requirements for high-performance software grow (e.g., automotive), and increasingly modern programming solutions replace the classical C++ compiler.  

 

 

12.15pm: Riyadh Baghdadi (host Hugh Leather hleather@inf.ed.ac.uk <mailto:hleather@inf.ed.ac.uk> ) 

Biography:
Riyadh Baghdadi is a postdoctoral associate at MIT. He works on the intersection of compilers and applied machine learning. More precisely, he works on developing compilers that take high-level code and optimize it automatically to generate highly efficient code. He uses machine learning to automate optimizations in these compilers. Before joining MIT, Riyadh obtained his Ph.D. and master's degrees from INRIA, France (Sorbonne University, Paris VI).

 

Publications: 

http://people.csail.mit.edu/baghdadi/

 

Research Talk:

Building Compilers for High Performance Code Generation
This talk is about building compilers for high performance code generation. It has three parts. The first part is about Tiramisu (http://tiramisu-compiler.org/ <http://tiramisu-compiler.org/> ), a polyhedral compiler designed for generating highly efficient code for multicores and GPUs. It is the first polyhedral compiler that can match the performance of highly hand-optimized industrial libraries such as Intel MKL and cuDNN. The second part is about applying Tiramisu to accelerate deep learning (DNN) inference. In comparison to other DNN compilers, Tiramisu has two unique features: (1) it supports sparse DNNs; and (2) it can express and optimize general RNNs (Recurrent Neural Networks). The third part will present recent work on the problem of automatic code optimization. In particular, it will focus on using deep learning to build a cost model to explore the search space of code optimizations.

 

1.00pm: Break 

 

Teaching talks run by Bjoern Franke 

The presentation should be in the form of a 15 minute introductory lecture, aimed at fourth year students, on the use of dataflow analysis in compilers.  The presentation will be attended by students (possibly of different levels) and staff, and there will be five minutes afterwards to ask questions about the presentation and about the candidates approach to teaching.

 

2.00pm: Soham Chakraborty 

 

2.30pm: Riyadh Baghdadi

 

3.00pm: Michael Steuwer

 

3.30pm: Break

 

3.45pm: Tobias Grosser

 

4.15pm: Thomas Spink

 

4.45pm: Feedback session

 

 

------

Samantha Inch

Staffing Support Manager

HR Office

Room 5.39

University of Edinburgh, Informatics Forum

10 Crichton St | Edinburgh | EH8 9AB

Tel:  +44 131 650 9006

 

The University of Edinburgh is a charitable body, registered in Scotland, with registration number SC005336.

 
